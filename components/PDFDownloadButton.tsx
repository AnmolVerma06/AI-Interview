"use client";

import { useState } from "react";
import { Button } from "./ui/button";
import { Download } from "lucide-react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

interface PDFDownloadButtonProps {
  interviewId: string;
  role: string;
  feedback: any;
  interviewDate: string;
}

const PDFDownloadButton = ({ interviewId, role, feedback, interviewDate }: PDFDownloadButtonProps) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);
    try {
      // Create a temporary div with the feedback content
      const feedbackContent = document.createElement("div");
      feedbackContent.style.padding = "20px";
      feedbackContent.style.fontFamily = "Arial, sans-serif";
      feedbackContent.style.backgroundColor = "white";
      feedbackContent.style.color = "black";
      feedbackContent.style.maxWidth = "800px";
      feedbackContent.style.margin = "0 auto";

      feedbackContent.innerHTML = `
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #2563eb; font-size: 28px; margin-bottom: 10px;">
            Interview Feedback Report
          </h1>
          <h2 style="color: #374151; font-size: 20px; margin-bottom: 20px;">
            ${role} Interview
          </h2>
          <p style="color: #6b7280; font-size: 14px;">
            Interview Date: ${interviewDate}
          </p>
        </div>

        <div style="margin-bottom: 30px; padding: 20px; background-color: #f8fafc; border-radius: 8px;">
          <h3 style="color: #1f2937; font-size: 18px; margin-bottom: 15px;">Overall Score</h3>
          <div style="display: flex; align-items: center; gap: 10px;">
            <span style="font-size: 36px; font-weight: bold; color: #2563eb;">${feedback.totalScore}</span>
            <span style="font-size: 18px; color: #6b7280;">/ 100</span>
          </div>
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #1f2937; font-size: 18px; margin-bottom: 15px;">Final Assessment</h3>
          <p style="line-height: 1.6; color: #374151;">${feedback.finalAssessment}</p>
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #1f2937; font-size: 18px; margin-bottom: 15px;">Category Breakdown</h3>
          ${feedback.categoryScores.map((category: any, index: number) => `
            <div style="margin-bottom: 15px; padding: 15px; background-color: #f8fafc; border-radius: 6px;">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                <h4 style="color: #1f2937; font-size: 16px; margin: 0;">${category.name}</h4>
                <span style="font-weight: bold; color: #2563eb;">${category.score}/100</span>
              </div>
              <p style="color: #374151; line-height: 1.5; margin: 0;">${category.comment}</p>
            </div>
          `).join('')}
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #1f2937; font-size: 18px; margin-bottom: 15px;">Strengths</h3>
          <ul style="color: #374151; line-height: 1.6;">
            ${feedback.strengths.map((strength: string) => `<li style="margin-bottom: 8px;">${strength}</li>`).join('')}
          </ul>
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #1f2937; font-size: 18px; margin-bottom: 15px;">Areas for Improvement</h3>
          <ul style="color: #374151; line-height: 1.6;">
            ${feedback.areasForImprovement.map((area: string) => `<li style="margin-bottom: 8px;">${area}</li>`).join('')}
          </ul>
        </div>

        <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
          <p style="color: #6b7280; font-size: 12px;">
            Generated by AI Interview Platform
          </p>
        </div>
      `;

      // Append to body temporarily
      document.body.appendChild(feedbackContent);

      // Generate canvas from the content
      const canvas = await html2canvas(feedbackContent, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: "#ffffff"
      });

      // Remove the temporary element
      document.body.removeChild(feedbackContent);

      // Create PDF
      const imgData = canvas.toDataURL("image/png");
      const pdf = new jsPDF("p", "mm", "a4");
      
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      pdf.addImage(imgData, "PNG", 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, "PNG", 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      // Download the PDF
      pdf.save(`interview-feedback-${role.toLowerCase().replace(/\s+/g, '-')}-${interviewId}.pdf`);
      
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Failed to generate PDF. Please try again.");
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button 
      onClick={generatePDF} 
      disabled={isGenerating}
      className="btn-primary flex items-center gap-2"
    >
      <Download size={16} />
      {isGenerating ? "Generating PDF..." : "Download PDF Report"}
    </Button>
  );
};

export default PDFDownloadButton;
